<?php

namespace Sunahip\FiscalizacionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FiscalizacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FiscalizacionRepository extends EntityRepository
{
    function listado($c, $status){
        $id = $c->getToken()->getUser()->getPerfil()[0]->getId();
        $q = $this->createQueryBuilder('u');        
        $q->join('u.providencia', 'p')
            ->where('u.estatus = :cit')
            ->join('u.citacion', 'c')
             -> join('p.fiscales', 'f')
             ->join('p.gerente', 'g');
        if($c->getToken()->getUser()->hasRole('ROLE_FISCAL')){
            $qb = $this->getEntityManager()->createQueryBuilder();
            $q->andwhere(
                $qb->expr()->orX(
                    $qb->expr()->eq('g.idperfil',$id),
                    $qb->expr()->eq('f.idperfil',$id)
                )
            );
        }
        $q->orderBy('c.fecha');
        $q->setParameter('cit', $status);
        return $q->getQuery()->getResult();
    }

    function exist($prov, $centro, $tipo){
        $q = $this->createQueryBuilder('f');
        $q->where('f.providencia = :prov');
        $q->andWhere("f.$tipo = :id");
        $q->setParameter('prov', $prov);
        $q->setParameter('id', $centro);
        $a = $q->getQuery()->getResult();
        if(!empty($a)){ 
            $e =  new \RuntimeException('Fiscalizado');
            $e->centro = $centro->getDenominacionComercial();
            $e->num    = $prov->getNum();
            throw $e;
        }
    }

    function citados($c){
        return $this->listado($c, 'Citado');
    }

    function multados($c){
        return $this->listado($c, 'Multado');
    }

    function todos($c){
        $id = $c->getToken()->getUser()->getPerfil()[0]->getId();
        $q = $this->createQueryBuilder('u');
        $q->join('u.providencia', 'p');
        if($c->getToken()->getUser()->hasRole('ROLE_FISCAL')){
             $qb = $this->getEntityManager()->createQueryBuilder();
             $q->join('p.fiscales', 'f')
                ->join('p.gerente', 'g')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->eq('g.idperfil',$id),
                        $qb->expr()->eq('f.idperfil',$id)
                    )
                );
        }
        return $q->getQuery()->getResult();
    }

    /*Devuelve las fiscalizaciones por usuario
    dueÃ±o de centro hipico operadora*/
    function usuario($c){
        $id = $c->getToken()->getUser()->getId();
        $q = $this->createQueryBuilder('u');
        $qb = $this->getEntityManager()->createQueryBuilder();
        $q->leftjoin('u.centro', 'c')
            ->leftjoin('u.operadora', 'o')
            ->where(
                    $qb->expr()->orX(
                        $qb->expr()->eq('o.usuario',$id),
                        $qb->expr()->eq('c.usuario',$id)
                    )
            );
        return $q->getQuery()->getResult();
    }



}
